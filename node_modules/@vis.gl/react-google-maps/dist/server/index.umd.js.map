{"version":3,"file":"index.umd.js","sources":["../../src/libraries/create-static-maps-url/helpers.ts","../../src/libraries/create-static-maps-url/assemble-marker-params.ts","../../src/libraries/create-static-maps-url/assemble-path-params.ts","../../src/libraries/create-static-maps-url/assemble-map-type-styles.ts","../../src/libraries/create-static-maps-url/index.ts","../../src/components/static-map.tsx"],"sourcesContent":["import {StaticMapsLocation} from './types';\n\n/**\n * Formats a location into a string representation suitable for Google Static Maps API.\n *\n * @param location - The location to format, can be either a string or an object with lat/lng properties\n * @returns A string representation of the location in the format \"lat,lng\" or the original string\n *\n * @example\n * // Returns \"40.714728,-73.998672\"\n * formatLocation({ lat: 40.714728, lng: -73.998672 })\n *\n * @example\n * // Returns \"New York, NY\"\n * formatLocation(\"New York, NY\")\n */\nexport function formatLocation(location: StaticMapsLocation): string {\n  return typeof location === 'string'\n    ? location\n    : `${location.lat},${location.lng}`;\n}\n\n// Used for removing the leading pipe from the param string\nexport function formatParam(string: string) {\n  return string.slice(1);\n}\n","import {formatParam} from './helpers';\nimport {StaticMapsMarker} from './types';\n\n/**\n * Assembles marker parameters for static maps.\n *\n * This function takes an array of markers and groups them by their style properties.\n * It then creates a string representation of these markers, including their styles and locations,\n * which can be used as parameters for static map APIs.\n *\n * @param {StaticMapsMarker[]} [markers=[]] - An array of markers to be processed. Each marker can have properties such as color, label, size, scale, icon, anchor, and location.\n * @returns {string[]} An array of strings, each representing a group of markers with their styles and locations.\n *\n * @example\n * const markers = [\n *   { color: 'blue', label: 'A', size: 'mid', location: '40.714728,-73.998672' },\n *   { color: 'blue', label: 'B', size: 'mid', location: '40.714728,-73.998672' },\n *   { icon: 'http://example.com/icon.png', location: { lat: 40.714728, lng: -73.998672 } }\n * ];\n * const params = assembleMarkerParams(markers);\n * // Params will be an array of strings representing the marker parameters\n * Example output: [\n *   \"color:blue|label:A|size:mid|40.714728,-73.998672|40.714728,-73.998672\",\n *   \"color:blue|label:B|size:mid|40.714728,-73.998672|40.714728,-73.998672\",\n *   \"icon:http://example.com/icon.png|40.714728,-73.998672\"\n * ]\n */\nexport function assembleMarkerParams(markers: StaticMapsMarker[] = []) {\n  const markerParams: Array<string> = [];\n\n  // Group markers by style\n  const markersByStyle = markers?.reduce(\n    (styles, marker) => {\n      const {color = 'red', label, size, scale, icon, anchor} = marker;\n\n      // Create a unique style key based on either icon properties or standard marker properties\n      const relevantProps = icon ? [icon, anchor, scale] : [color, label, size];\n      const key = relevantProps.filter(Boolean).join('-');\n\n      styles[key] = styles[key] || [];\n      styles[key].push(marker);\n      return styles;\n    },\n    {} as Record<string, StaticMapsMarker[]>\n  );\n\n  Object.values(markersByStyle ?? {}).forEach(markers => {\n    let markerParam: string = '';\n\n    const {icon} = markers[0];\n\n    // Create marker style from first marker in group since all markers share the same style.\n    Object.entries(markers[0]).forEach(([key, value]) => {\n      // Determine which properties to include based on whether marker uses custom icon\n      const relevantKeys = icon\n        ? ['icon', 'anchor', 'scale']\n        : ['color', 'label', 'size'];\n\n      if (relevantKeys.includes(key)) {\n        markerParam += `|${key}:${value}`;\n      }\n    });\n\n    // Add location coordinates for each marker in the style group\n    // Handles both string locations and lat/lng object formats.\n    for (const marker of markers) {\n      const location =\n        typeof marker.location === 'string'\n          ? marker.location\n          : `${marker.location.lat},${marker.location.lng}`;\n\n      markerParam += `|${location}`;\n    }\n\n    markerParams.push(markerParam);\n  });\n\n  return markerParams.map(formatParam);\n}\n","import {formatLocation, formatParam} from './helpers';\nimport {StaticMapsPath} from './types';\n\n/**\n * Assembles path parameters for the Static Maps Api from an array of paths.\n *\n * This function groups paths by their style properties (color, weight, fillcolor, geodesic)\n * and then constructs a string of path parameters for each group. Each path parameter string\n * includes the style properties and the coordinates of the paths.\n *\n * @param {Array<StaticMapsPath>} [paths=[]] - An array of paths to be assembled into path parameters.\n * @returns {Array<string>} An array of path parameter strings.\n *\n * @example\n * const paths = [\n *   {\n *     color: 'red',\n *     weight: 5,\n *     coordinates: [\n *       { lat: 40.714728, lng: -73.998672 },\n *       { lat: 40.718217, lng: -73.998284 }\n *     ]\n *   }\n * ];\n *\n * const pathParams = assemblePathParams(paths);\n * Output: [\n *    'color:red|weight:5|40.714728,-73.998672|40.718217,-73.998284'\n *  ]\n */\nexport function assemblePathParams(paths: Array<StaticMapsPath> = []) {\n  const pathParams: Array<string> = [];\n\n  // Group paths by their style properties (color, weight, fillcolor, geodesic)\n  // to combine paths with identical styles into single parameter strings\n  const pathsByStyle = paths?.reduce(\n    (styles, path) => {\n      const {color = 'default', weight, fillcolor, geodesic} = path;\n\n      // Create unique key for this style combination\n      const key = [color, weight, fillcolor, geodesic]\n        .filter(Boolean)\n        .join('-');\n\n      styles[key] = styles[key] || [];\n      styles[key].push(path);\n      return styles;\n    },\n    {} as Record<string, Array<StaticMapsPath>>\n  );\n\n  // Process each group of paths with identical styles\n  Object.values(pathsByStyle ?? {}).forEach(paths => {\n    let pathParam = '';\n\n    // Build style parameter string using properties from first path in group\n    // since all paths in this group share the same style\n    Object.entries(paths[0]).forEach(([key, value]) => {\n      if (['color', 'weight', 'fillcolor', 'geodesic'].includes(key)) {\n        pathParam += `|${key}:${value}`;\n      }\n    });\n\n    // Add location for all marker in style group\n    for (const path of paths) {\n      if (typeof path.coordinates === 'string') {\n        pathParam += `|${decodeURIComponent(path.coordinates)}`;\n      } else {\n        for (const location of path.coordinates) {\n          pathParam += `|${formatLocation(location)}`;\n        }\n      }\n    }\n\n    pathParams.push(pathParam);\n  });\n\n  return pathParams.map(formatParam);\n}\n","import {formatParam} from './helpers';\n\n/**\n * Converts an array of Google Maps style objects into an array of style strings\n * compatible with the Google Static Maps API.\n *\n * @param styles - An array of Google Maps MapTypeStyle objects that define the styling rules\n * @returns An array of formatted style strings ready to be used with the Static Maps API\n *\n * @example\n * const styles = [{\n *   featureType: \"road\",\n *   elementType: \"geometry\",\n *   stylers: [{color: \"#ff0000\"}, {weight: 1}]\n * }];\n *\n * const styleStrings = assembleMapTypeStyles(styles);\n * // Returns: [\"|feature:road|element:geometry|color:0xff0000|weight:1\"]\n *\n * Each style string follows the format:\n * \"feature:{featureType}|element:{elementType}|{stylerName}:{stylerValue}\"\n *\n * Note: Color values with hexadecimal notation (#) are automatically converted\n * to the required 0x format for the Static Maps API.\n */\nexport function assembleMapTypeStyles(\n  styles: Array<google.maps.MapTypeStyle>\n): string[] {\n  return styles\n    .map((mapTypeStyle: google.maps.MapTypeStyle) => {\n      const {featureType, elementType, stylers = []} = mapTypeStyle;\n\n      let styleString = '';\n\n      if (featureType) {\n        styleString += `|feature:${featureType}`;\n      }\n\n      if (elementType) {\n        styleString += `|element:${elementType}`;\n      }\n\n      for (const styler of stylers) {\n        Object.entries(styler).forEach(([name, value]) => {\n          styleString += `|${name}:${String(value).replace('#', '0x')}`;\n        });\n      }\n\n      return styleString;\n    })\n    .map(formatParam);\n}\n","import {assembleMarkerParams} from './assemble-marker-params';\nimport {assemblePathParams} from './assemble-path-params';\nimport {formatLocation} from './helpers';\n\nimport {StaticMapsApiOptions} from './types';\nimport {assembleMapTypeStyles} from './assemble-map-type-styles';\n\nconst STATIC_MAPS_BASE = 'https://maps.googleapis.com/maps/api/staticmap';\n\n/**\n * Creates a URL for the Google Static Maps API with the specified parameters.\n *\n * @param {Object} options - The configuration options for the static map\n * @param {string} options.apiKey - Your Google Maps API key (required)\n * @param {number} options.width - The width of the map image in pixels (required)\n * @param {number} options.height - The height of the map image in pixels (required)\n * @param {StaticMapsLocation} [options.center] - The center point of the map (lat/lng or address).\n *  Required if no markers or paths or \"visible locations\" are provided.\n * @param {number} [options.zoom] - The zoom level of the map. Required if no markers or paths or \"visible locations\" are provided.\n * @param {1|2|4} [options.scale] - The resolution of the map (1, 2, or 4)\n * @param {string} [options.format] - The image format (png, png8, png32, gif, jpg, jpg-baseline)\n * @param {string} [options.mapType] - The type of map (roadmap, satellite, terrain, hybrid)\n * @param {string} [options.language] - The language of the map labels\n * @param {string} [options.region] - The region code for the map\n * @param {string} [options.map_id] - The Cloud-based map style ID\n * @param {StaticMapsMarker[]} [options.markers=[]] - Array of markers to display on the map\n * @param {StaticMapsPath[]} [options.paths=[]] - Array of paths to display on the map\n * @param {StaticMapsLocation[]} [options.visible=[]] - Array of locations that should be visible on the map\n * @param {MapTypeStyle[]} [options.style=[]] - Array of style objects to customize the map appearance\n *\n * @returns {string} The complete Google Static Maps API URL\n *\n * @throws {Error} If API key is not provided\n * @throws {Error} If width or height is not provided\n *\n * @example\n * const url = createStaticMapsUrl({\n *   apiKey: 'YOUR_API_KEY',\n *   width: 600,\n *   height: 400,\n *   center: { lat: 40.714728, lng: -73.998672 },\n *   zoom: 12,\n *   markers: [\n *     {\n *       location: { lat: 40.714728, lng: -73.998672 },\n *       color: 'red',\n *       label: 'A'\n *     }\n *   ],\n *   paths: [\n *     {\n *       coordinates: [\n *         { lat: 40.714728, lng: -73.998672 },\n *         { lat: 40.719728, lng: -73.991672 }\n *       ],\n *       color: '0x0000ff',\n *       weight: 5\n *     }\n *   ],\n *   style: [\n *     {\n *       featureType: 'road',\n *       elementType: 'geometry',\n *       stylers: [{color: '#00ff00'}]\n *     }\n *   ]\n * });\n *\n * // Results in URL similar to:\n * // https://maps.googleapis.com/maps/api/staticmap?key=YOUR_API_KEY\n * // &size=600x400\n * // &center=40.714728,-73.998672&zoom=12\n * // &markers=color:red|label:A|40.714728,-73.998672\n * // &path=color:0x0000ff|weight:5|40.714728,-73.998672|40.719728,-73.991672\n * // &style=feature:road|element:geometry|color:0x00ff00\n */\nexport function createStaticMapsUrl({\n  apiKey,\n  width,\n  height,\n  center,\n  zoom,\n  scale,\n  format,\n  mapType,\n  language,\n  region,\n  mapId,\n  markers = [],\n  paths = [],\n  visible = [],\n  style = []\n}: StaticMapsApiOptions) {\n  if (!apiKey) {\n    console.warn('API key is required');\n  }\n  if (!width || !height) {\n    console.warn('Width and height are required');\n  }\n\n  const params: Record<string, string | number | null> = {\n    key: apiKey,\n    size: `${width}x${height}`,\n    ...(center && {center: formatLocation(center)}),\n    ...(zoom && {zoom}),\n    ...(scale && {scale}),\n    ...(format && {format}),\n    ...(mapType && {maptype: mapType}),\n    ...(language && {language}),\n    ...(region && {region}),\n    ...(mapId && {map_id: mapId})\n  };\n\n  const url = new URL(STATIC_MAPS_BASE);\n\n  // Params that don't need special handling\n  Object.entries(params).forEach(([key, value]) => {\n    url.searchParams.append(key, String(value));\n  });\n\n  // Assemble Markers\n  for (const markerParam of assembleMarkerParams(markers)) {\n    url.searchParams.append('markers', markerParam);\n  }\n\n  // Assemble Paths\n  for (const pathParam of assemblePathParams(paths)) {\n    url.searchParams.append('path', pathParam);\n  }\n\n  // Assemble visible locations\n  if (visible.length) {\n    url.searchParams.append(\n      'visible',\n      visible.map(location => formatLocation(location)).join('|')\n    );\n  }\n\n  // Assemble Map Type Styles\n  for (const styleString of assembleMapTypeStyles(style)) {\n    url.searchParams.append('style', styleString);\n  }\n\n  return url.toString();\n}\n","import React from 'react';\n\nexport {createStaticMapsUrl} from '../libraries/create-static-maps-url';\nexport * from '../libraries/create-static-maps-url/types';\n\n/**\n * Props for the StaticMap component\n */\nexport type StaticMapProps = {\n  url: string;\n  className?: string;\n};\n\nexport const StaticMap = (props: StaticMapProps) => {\n  const {url, className} = props;\n\n  if (!url) throw new Error('URL is required');\n\n  return <img className={className} src={url} width=\"100%\" />;\n};\n"],"names":["formatLocation","location","lat","lng","formatParam","string","slice","assembleMarkerParams","markers","_markers","markerParams","markersByStyle","reduce","styles","marker","_marker$color","color","label","size","scale","icon","anchor","relevantProps","key","filter","Boolean","join","push","Object","values","forEach","markerParam","entries","_ref","value","relevantKeys","includes","_iterator","_createForOfIteratorHelperLoose","_step","done","map","assemblePathParams","paths","_paths","pathParams","pathsByStyle","path","_path$color","weight","fillcolor","geodesic","pathParam","coordinates","decodeURIComponent","_iterator2","_step2","assembleMapTypeStyles","mapTypeStyle","featureType","elementType","_mapTypeStyle$stylers","stylers","styleString","styler","name","String","replace","STATIC_MAPS_BASE","createStaticMapsUrl","apiKey","width","height","center","zoom","format","mapType","language","region","mapId","_ref$markers","_ref$paths","_ref$visible","visible","_ref$style","style","console","warn","params","_extends","maptype","map_id","url","URL","_ref2","searchParams","append","length","_iterator3","_step3","toString","StaticMap","props","className","Error","React","createElement","src"],"mappings":"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"}